// Generated by CoffeeScript 1.12.4
(function() {
  (require("chai")).should();

  describe("Validation", function() {
    var V;
    V = require("../../src/util/validation");
    return describe("entryForm", function() {
      var F;
      F = V.entryForm;
      describe("title", function() {
        it("should exist", function() {
          return F({
            title: null
          }).title.should.have.string("Pflicht");
        });
        it("should be at least 3 chars long", function() {
          return F({
            title: "a"
          }).title.should.have.string("Zu kurzer Titel");
        });
        it("should be at most 40 chars long", function() {
          var i, t;
          t = ((function() {
            var j, results;
            results = [];
            for (i = j = 1; j <= 50; i = ++j) {
              results.push("a");
            }
            return results;
          })()).join('');
          return F({
            title: t
          }).title.should.have.string("Zu langer Titel");
        });
        return it("should not throw error if valid", function() {
          return should.not.exist(F({
            title: "abc"
          }).title);
        });
      });
      describe("description", function() {
        it("should exist", function() {
          return F({
            description: null
          }).description.should.have.string("Pflicht");
        });
        it("should be at least 10 chars long", function() {
          return F({
            description: "asadf"
          }).description.should.have.string("Zu wenig Text");
        });
        it("should be at most 250 chars long", function() {
          var i, t;
          t = ((function() {
            var j, results;
            results = [];
            for (i = j = 1; j <= 251; i = ++j) {
              results.push("a");
            }
            return results;
          })()).join('');
          return F({
            description: t
          }).description.should.have.string("Zu lange Beschreibung");
        });
        return it("should not throw error if valid", function() {
          var i, t;
          t = ((function() {
            var j, results;
            results = [];
            for (i = j = 1; j <= 50; i = ++j) {
              results.push("a");
            }
            return results;
          })()).join('');
          return should.not.exist(F({
            description: t
          }).description);
        });
      });
      describe("lat & lng", function() {
        it("should exist", function() {
          F({
            lat: null
          }).lat.should.have.string("Pflicht");
          return F({
            lng: null
          }).lng.should.have.string("Pflicht");
        });
        it("should be a number ", function() {
          F({
            lat: "ab"
          }).lat.should.have.string("Ungültiger Breitengrad");
          F({
            lng: "ab"
          }).lng.should.have.string("Ungültiger Längengrad");
          should.not.exist(F({
            lat: "1"
          }).lat);
          return should.not.exist(F({
            lng: "1"
          }).lng);
        });
        return it("should not throw error if valid", function() {
          should.not.exist(F({
            lat: 1
          }).lat);
          return should.not.exist(F({
            lng: 1
          }).lng);
        });
      });
      describe("category", function() {
        it("should exist", function() {
          return F({
            category: null
          }).category.should.have.string("Pflicht");
        });
        it("should be a string", function() {
          F({
            category: 1
          }).category.should.have.string("Ungültig");
          F({
            category: 1.7
          }).category.should.have.string("Ungültig");
          F({
            category: {}
          }).category.should.have.string("Ungültig");
          return F({
            category: []
          }).category.should.have.string("Ungültig");
        });
        return it("should not throw error if valid", function() {
          return should.not.exist(F({
            category: "1"
          }).category);
        });
      });
      describe("license", function() {
        it("should exist", function() {
          return F({
            license: null
          }).license.should.have.string("Lizenzzustimmung");
        });
        it("should be a boolean", function() {
          F({
            license: 1
          }).license.should.have.string("Ungültig");
          F({
            license: 1.7
          }).license.should.have.string("Ungültig");
          F({
            license: {}
          }).license.should.have.string("Ungültig");
          return F({
            license: []
          }).license.should.have.string("Ungültig");
        });
        return it("should be accepted", function() {
          F({
            license: false
          }).license.should.have.string("Lizenzzustimmung ist nötig");
          return should.not.exist(F({
            license: true
          }).license);
        });
      });
      return describe("homepage", function() {
        it("should contain the protocol", function() {
          F({
            homepage: "example.org"
          }).homepage.should.have.string("Ungültig");
          F({
            homepage: "www.example.org"
          }).homepage.should.have.string("Ungültig");
          should.not.exist(F({
            homepage: "http://foo.bar"
          }).homepage);
          return should.not.exist(F({
            homepage: "https://foo.bar"
          }).homepage);
        });
        return it("should be long enough", function() {
          F({
            homepage: "http://"
          }).homepage.should.have.string("Ungültig");
          return F({
            homepage: "https://"
          }).homepage.should.have.string("Ungültig");
        });
      });
    });
  });

}).call(this);
