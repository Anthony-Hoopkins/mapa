// Generated by CoffeeScript 1.12.4
(function() {
  var hasProp = {}.hasOwnProperty;

  (require("chai")).should();

  describe("Actions", function() {
    var A;
    A = require("../src/Actions");
    it("should be functions", function() {
      var k, results, v;
      results = [];
      for (k in A) {
        if (!hasProp.call(A, k)) continue;
        v = A[k];
        results.push(v.should.be.a("function"));
      }
      return results;
    });
    it("should return objects or functions", function() {
      var k, ref, results, v;
      results = [];
      for (k in A) {
        if (!hasProp.call(A, k)) continue;
        v = A[k];
        results.push(((ref = typeof v()) === "object" || ref === "function").should.be["true"]);
      }
      return results;
    });
    it("should return objects with a type attribute", function() {
      var a, k, results, v;
      results = [];
      for (k in A) {
        if (!hasProp.call(A, k)) continue;
        v = A[k];
        if (typeof (a = v()) === "object") {
          results.push(a.type.should.be.a("string"));
        }
      }
      return results;
    });
    it("must not return objects with properties other than type, error, payload and meta", function() {
      var a, k, results, v, valid;
      results = [];
      for (k in A) {
        if (!hasProp.call(A, k)) continue;
        v = A[k];
        if (typeof (a = v()) === "object") {
          results.push((function() {
            var results1;
            results1 = [];
            for (k in a) {
              if (!hasProp.call(a, k)) continue;
              valid = k === "type" || k === "payload" || k === "error" || k === "meta";
              if (!valid) {
                console.log(a.type + " has a invalid property '" + k + "'");
              }
              results1.push(valid.should.be["true"]);
            }
            return results1;
          })());
        }
      }
      return results;
    });
    return describe("search", function() {
      return it("should return a function", function() {
        return A.search().should.be.a("function");
      });
    });
  });

}).call(this);
